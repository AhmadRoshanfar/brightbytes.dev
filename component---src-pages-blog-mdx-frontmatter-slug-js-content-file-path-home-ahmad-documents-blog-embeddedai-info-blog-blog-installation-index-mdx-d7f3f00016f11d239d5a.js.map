{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-home-ahmad-documents-blog-embeddedai-info-blog-blog-installation-index-mdx-d7f3f00016f11d239d5a.js","mappings":"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","sources":["webpack://embedded-ai_blog/./blog/installation/index.mdx","webpack://embedded-ai_blog/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://embedded-ai_blog/./src/components/titleTags.js","webpack://embedded-ai_blog/./src/components/postTitle.js","webpack://embedded-ai_blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Installation\"), \"\\n\", React.createElement(_components.h3, null, \"Install Qt’s MQTT Library\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://code.qt.io/cgit/qt/qtmqtt.git/\"\n  }, \"https://code.qt.io/cgit/qt/qtmqtt.git/\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=DGB0GfFRqPo\"\n  }, \"Getting Started with MQTT using Qt #mqtt #qt\")), \"\\n\", React.createElement(\"aside\", null, React.createElement(_components.p, null, \"⚠️ Not working with 6.5 version. Currently using 6.2.4 version as mentioned in the above video.”\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"#Qt_Environment.sh created in qmqtt folder\\n\\nexport QT_VERSION=\\\"6.2.4\\\"\\nexport QT_INSTALL_DIR=\\\"/home/ahmad/Qt5/\\\"\\nexport CMAKE_BIN_DIR=\\\"${QT_INSTALL_DIR}/Tools/CMake/bin\\\"\\nexport QMAKE_BIN_DIR=\\\"${QT_INSTALL_DIR}/${QT_VERSION}/gcc_64/bin\\\"\\nexport CMAKE_PREFIX_PATH=\\\"${QT_INSTALL_DIR}/${QT_VERSION}/gcc_64/lib/cmake\\\"\\nexport NINJA_DIR=\\\"${QT_INSTALL_DIR}/Tools/Ninja\\\"\\nexport PATH=\\\"${PATH}:${CMAKE_BIN_DIR}:${QMAKE_BIN_DIR}:${NINJA_DIR}\\\"\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"git clone -b 6.2.4 git://code.qt.io/qt/qtmqtt.git \\ncd qtmqtt\\nmkdir build && cd build\\nsource ../Qt_Environment.sh \\n<QT_Installation_Path>/6.5.0/gcc_64/bin/qt-configure-module ..\\n<QT_Installation_Path>/Tools/CMake/bin/cmake --build .   \\n<QT_Installation_Path>/Tools/CMake/bin/cmake --install . --verbose\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Adding MQTT to the project\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c\"\n  }, \"find_package(Qt6 REQUIRED COMPONENTS Mqtt)\\ntarget_link_libraries(mytarget PRIVATE Qt6::Mqtt)\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/ahmad/Documents/Blog/embeddedai.info-blog/blog/installation/index.mdx\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {graphql} from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport PostTitle from \"../../components/postTitle\";\nconst BlogPost = ({data, children}) => {\n  const tags = data.mdx.frontmatter.tags || [];\n  return React.createElement(React.Fragment, null, React.createElement(MDXProvider, {\n    components: {}\n  }, React.createElement(Layout, null, React.createElement(PostTitle, {\n    data: data,\n    tags: tags\n  }), children)));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n        date(formatString: \"MMMM DD, YYYY\")\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 512)\n          }\n        }\n\n        #   hero_image_alt\n        #   hero_image_credit_link\n        #   hero_image_credit_text\n        #   hero_image\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import { Link } from \"gatsby\";\nimport kebabCase from \"lodash/kebabCase\";\nimport React from \"react\";\n\nconst TitleTags = ({ tags }) => {\n  return (\n    <div className=\"flex flex-row h-full justify-center items-center\">\n      {tags.map((tag) => (\n        <Link\n          to={`/tags/${kebabCase(tag)}/`}\n          className=\"flex mx-1 my-2 bg-gray-200 py-1 px-2 text-sm rounded\t\"\n        >\n          {tag}\n        </Link>\n      ))}\n    </div>\n  );\n};\nexport default TitleTags;\n","import { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\nimport TitleTags from \"./titleTags\";\n\n/* Comment */\nconst PostTitle = ({ data, tags }) => {\n  return (\n    <>\n      <GatsbyImage\n        className=\"rounded-lg m-5 w-full \"\n        image={getImage(\n          data.mdx.frontmatter.featuredImage.childImageSharp.gatsbyImageData\n        )}\n        imgStyle={{ objectFit: \"contain\" }}\n      />\n\n      <div className=\"flex justify-center items-center\">\n        <div className=\"inline-block\">\n          <h1 className=\"text-center text-4xl font-bold mt-8\">\n            {data.mdx.frontmatter.title}\n          </h1>\n          <div className=\"flex justify-start text-center pb-6 \">\n            <p className=\"flex items-start text-center\">\n              {data.mdx.frontmatter.date}\n            </p>\n            <TitleTags tags={tags} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostTitle;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h3","p","a","pre","code","_provideComponents","components","React","href","className","wrapper","MDXLayout","BlogPost","_ref","data","children","tags","mdx","frontmatter","MDXProvider","Layout","PostTitle","Head","_ref2","title","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","map","tag","Link","to","kebabCase","G","image","getImage","featuredImage","childImageSharp","gatsbyImageData","imgStyle","objectFit","date","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}