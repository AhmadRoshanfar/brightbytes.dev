{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-users-bright-projects-brightbytes-dev-src-blog-flutter-embedded-linux-orangepi-zero-2-w-index-mdx-88f807bf75193135f4cc.js","mappings":"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","sources":["webpack://brightbytes.dev/./src/blog/flutter-embedded-linux-orangepi-zero-2w/index.mdx","webpack://brightbytes.dev/./src/pages/blog/{mdx.frontmatter__slug}.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport CodeViewer from '../../components/mdx/codeViewer.js';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Getting Started with Flutter on Embedded Linux\"), \"\\n\", React.createElement(_components.p, null, \"Flutter is an open-source framework that lets you build multi-platform applications from a single Dart codebase. While Flutter officially targets mobile, desktop, and web, with \", React.createElement(_components.a, {\n    href: \"https://github.com/sony/flutter-elinux\"\n  }, \"flutter-elinux\"), \" you can bring Flutter to resource-constrained Embedded Linux devices like the Orange Pi Zero 2W.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, null, \"1. SSH into the Orange Pi Zero 2W\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\n   # Discover the board's IP on your LAN:\n   hostname -I\n   nmap -sn 192.168.1.0/24\n\n   # SSH in (default credentials):\n   ssh orangepi@<BOARD_IP>\n   # password: orangepi `\n  }), \"\\n\", React.createElement(_components.h2, null, \"2. Install Dependencies & flutter-elinux\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nsudo apt update\nsudo apt install libstdc++-12-dev unzip curl clang cmake pkg-config git`\n  }), \"\\n\", React.createElement(_components.p, null, \"Clone and set up the CLI:\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\ngit clone https://github.com/sony/flutter-elinux.git\nsudo mv flutter-elinux /opt/\nexport PATH=$PATH:/opt/flutter-elinux/bin`\n  }), \"\\n\", React.createElement(_components.p, null, \"Verify your device is recognized:\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nflutter-elinux devices\n# Should list something like “elinux-arm64”.`\n  }), \"\\n\", React.createElement(_components.h2, null, \"3. Create & Test a Sample App on X11\"), \"\\n\", React.createElement(_components.p, null, \"Use X11 for rapid iteration:\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nflutter-elinux create sample\ncd sample\n\nexport XDG_SESSION_TYPE=x11\nexport DISPLAY=:0\n\nflutter-elinux run -d elinux-x11`\n  }), \"\\n\", React.createElement(_components.p, null, \"You’ll get hot-reload and desktop-like development.\"), \"\\n\", React.createElement(_components.h2, null, \"4. Run on the Linux Framebuffer (DRM/GBM)\"), \"\\n\", React.createElement(_components.p, null, \"Bypass X11 to run directly on DRM/KMS:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Stop and disable your display manager:\"), \"\\n\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nsudo systemctl stop lightdm\nsudo systemctl disable lightdm`\n  }), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Build for the GBM backend:\"), \"\\n\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nflutter-elinux build elinux --debug --target-backend-type=gbm`\n  }), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Launch on \", React.createElement(_components.code, null, \"/dev/dri/card0\"), \":\"), \"\\n\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nsudo XDG_RUNTIME_DIR=/tmp/runtime-root \\\\\n     FLUTTER_DRM_DEVICE=/dev/dri/card0 \\\\\n     ./build/elinux/arm64/debug/bundle/sample \\\\\n     -b ./build/elinux/arm64/debug/bundle`\n  }), \"\\n\", React.createElement(_components.p, null, \"Your Flutter UI should appear fullscreen via DRM/KMS.\"), \"\\n\", React.createElement(_components.h2, null, \"5. Auto-Start with systemd\"), \"\\n\", React.createElement(_components.p, null, \"Create \", React.createElement(_components.code, null, \"/etc/systemd/system/flutter-sample.service\"), \":\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\n[Unit]\nDescription=Flutter Sample App\nAfter=network.target\n\n[Service]\nUser=orangepi\nWorkingDirectory=/home/orangepi/sample\nExecStart=/bin/bash -c \"\\\\\n  XDG_RUNTIME_DIR=/tmp/runtime-root \\\\\n  FLUTTER_DRM_DEVICE=/dev/dri/card0 \\\\\n  /home/orangepi/sample/build/elinux/arm64/debug/bundle/sample \\\\\n  -b /home/orangepi/sample/build/elinux/arm64/debug/bundle\"\nRestart=always\n\n[Install]\nWantedBy=multi-user.target`\n  }), \"\\n\", React.createElement(_components.p, null, \"Enable and start it:\"), \"\\n\", React.createElement(CodeViewer, {\n    code: `\\\nsudo systemctl daemon-reload\nsudo systemctl enable flutter-sample.service\nsudo systemctl start flutter-sample.service`\n  }), \"\\n\", React.createElement(_components.p, null, \"On reboot, your Flutter app will launch directly on the framebuffer.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/bright/projects/brightbytes.dev/src/blog/flutter-embedded-linux-orangepi-zero-2w/index.mdx\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {graphql} from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport PostTitle from \"../../components/postTitle\";\nconst BlogPost = ({data, children}) => {\n  const tags = data.mdx.frontmatter.tags || [];\n  return React.createElement(React.Fragment, null, React.createElement(MDXProvider, {\n    components: {}\n  }, React.createElement(Layout, null, React.createElement(PostTitle, {\n    data: data,\n    tags: tags\n  }), children)));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        tags\n        date(formatString: \"MMMM DD, YYYY\")\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 512)\n          }\n        }\n\n        #   hero_image_alt\n        #   hero_image_credit_link\n        #   hero_image_credit_text\n        #   hero_image\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","h2","ol","li","code","_provideComponents","components","React","href","CodeViewer","start","wrapper","MDXLayout","BlogPost","_ref","data","children","tags","mdx","frontmatter","MDXProvider","Layout","PostTitle","Head","_ref2","title","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}