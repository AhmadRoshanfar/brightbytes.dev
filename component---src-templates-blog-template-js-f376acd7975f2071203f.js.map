{"version":3,"file":"component---src-templates-blog-template-js-f376acd7975f2071203f.js","mappings":"2NAIe,SAASA,IACtB,OACE,gBAAC,EAAAC,YAAW,CACVC,MAAK,aAULC,OAASC,GACP,uBAAKC,UAAU,2DACb,2BACE,sBAAIA,UAAU,eAAc,QAC5B,2BACGD,EAAKE,OAAOC,MAAMC,KAAKC,GACtB,qBAAGC,IAAKD,EAAIE,WAAYN,UAAU,eAChC,gBAAC,EAAAO,KAAI,CACHC,GAAK,SAAQC,IAAUL,EAAIA,QAC3BJ,UAAU,+FAETI,EAAIA,IAAI,KAAGA,EAAIM,WAAW,YAU/C,C,wBCGA,MArCiB,IAAgB,IAAf,MAAEC,GAAO,EACzB,OACE,uBAAKX,UAAU,wBACZW,EAAMR,KAAKS,GACV,2BAASZ,UAAU,OAAOK,IAAKO,EAAKC,IAClC,gBAAC,EAAAN,KAAI,CAACP,UAAU,UAAUQ,GAAK,SAAQI,EAAKE,YAAYC,QACxD,uBAAKf,UAAU,0BACb,uBAAKA,UAAU,6CACb,uBAAKA,UAAU,uBACb,sBAAIA,UAAU,oCACZ,gBAAC,EAAAO,KAAI,CAACP,UAAU,gBAAgBQ,GAAK,SAAQI,EAAKE,YAAYC,QAC3DH,EAAKE,YAAYE,QAGtB,qBAAGhB,UAAU,gCAAgCY,EAAKK,UAEpD,gBAAC,EAAAC,EAAW,CACVlB,UAAU,2DACVmB,OAAOC,EAAAA,EAAAA,GACLR,EAAKE,YAAYO,cAAcC,gBAAgBC,iBAEjDC,gBAAgB,QAChBC,SAAU,CAAEC,UAAW,QAASC,MAAO,OAAQC,OAAQ,WAG3D,uBAAK5B,UAAU,uDACb,qBAAGA,UAAU,QAAO,2BACpB,yBAAG,WAASY,EAAKE,YAAYe,YAMjC,ECjCoC,IAEzBC,EAAQ,8DA4C1B,OA5C0B,wBAC3BhC,OAAA,WACE,MAAMiC,EAAQC,KAAKC,MAAMlC,KAAKE,OAAOiC,MAC/BvB,EAAQqB,KAAKC,MAAMlC,KAAKE,OAAOU,OAC/B,YAAEwB,EAAW,SAAEC,GAAaJ,KAAKC,MAAMI,YACvCC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGM,WAC3DC,GAAYP,EAAc,GAAGM,WAGnC,OADAE,QAAQC,IAAIb,GAEV,gBAAC,IAAM,KACL,uBAAK/B,UAAU,uCACb,gBAAC,EAAQ,CAACW,MAAOA,IACjB,gBAAChB,EAAQ,OAEX,uBAAKK,UAAU,8CACXsC,GACA,gBAAC,EAAA/B,KAAI,CACHC,GAAK,SAAuB,IAAhB2B,EAAoB,GAAM,IAAGK,KACzCK,IAAI,QACL,mBAIFC,MAAMC,KAAK,CAAEC,OAAQZ,IAAY,CAACa,EAAGC,IACpC,qBACE7C,IAAM,oBAAmB6C,EAAI,IAC7BC,MAAO,CACLC,OAAQ,IAGV,gBAAC,EAAA7C,KAAI,CAACC,GAAK,SAAc,IAAN0C,EAAU,GAAKA,EAAI,KAAMA,EAAI,OAGlDX,GACA,gBAAC,EAAAhC,KAAI,CAACC,GAAK,SAAQkC,IAAYG,IAAI,QAAO,gBAOpD,EAAC,EA5C0B,CAASQ,EAAAA,U","sources":["webpack://embedded-ai_blog/./src/components/category.js","webpack://embedded-ai_blog/./src/components/postCard.js","webpack://embedded-ai_blog/./src/templates/blogTemplate.js"],"sourcesContent":["import { Link, StaticQuery, graphql } from \"gatsby\";\nimport kebabCase from \"lodash/kebabCase\";\nimport React from \"react\";\n\nexport default function Category() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query TagsQuery {\n          allMdx(limit: 2000) {\n            group(field: { frontmatter: { tags: SELECT } }) {\n              tag: fieldValue\n              totalCount\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <div className=\"bg-gray-800 rounded-lg px-10 py-4 m-2 h-fit text-white \">\n          <div>\n            <h1 className=\"text-center\">Tags</h1>\n            <div>\n              {data.allMdx.group.map((tag) => (\n                <p key={tag.fieldValue} className=\"w-full py-2\">\n                  <Link\n                    to={`/tags/${kebabCase(tag.tag)}/`}\n                    className=\" w-full justify-start px-3 whitespace-nowrap items-start text-start bg-black text-teal-300 \"\n                  >\n                    {tag.tag} ({tag.totalCount})\n                  </Link>\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    />\n  );\n}\n","import { Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nconst PostCard = ({ nodes }) => {\n  return (\n    <div className=\"flex flex-col w-full\">\n      {nodes.map((node) => (\n        <article className=\"mt-2\" key={node.id}>\n          <Link className=\"p-0 m-0\" to={`/blog/${node.frontmatter.slug}`}>\n          <div className=\"bg-post-bg text-white \">\n            <div className=\"flex md:flex-row flex-col justify-between\">\n              <div className=\"flex flex-col w-2/3\">\n                <h2 className=\"font-bold my-1 mx-3 py-3 text-lg\">\n                  <Link className=\"text-2xl ml-2\" to={`/blog/${node.frontmatter.slug}`}>\n                    {node.frontmatter.title}\n                  </Link>\n                </h2>\n                <p className=\"mx-6 text-gray-300 text-wrap\">{node.excerpt}</p>\n              </div>\n              <GatsbyImage\n                className=\"rounded-lg m-5 sm:w-60 sm:h-30 w-40 h-30 overflow-hidden\"\n                image={getImage(\n                  node.frontmatter.featuredImage.childImageSharp.gatsbyImageData\n                )}\n                backgroundColor=\"white\"\n                imgStyle={{ objectFit: \"cover\", width: \"100%\", height: \"100%\" }}\n                />\n            </div>\n            <div className=\"flex justify-between items-center mt-2 mx-3 text-sm\">\n              <p className=\"ml-4\">Author: Ahmad Roshanfar</p>\n              <p>Posted: {node.frontmatter.date}</p>\n            </div>\n          </div>\n      </Link>\n        </article>\n      ))}\n    </div>\n  );\n};\n\nexport default PostCard;\n","import { Link, graphql } from \"gatsby\";\nimport React from \"react\";\nimport Category from \"../components/category\";\nimport Layout from \"../components/layout/layout\";\nimport PostCard from \"../components/postCard\";\n\nexport default class BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.allMdx.edges;\n    const nodes = this.props.data.allMdx.nodes;\n    const { currentPage, numPages } = this.props.pageContext;\n    const isFirst = currentPage === 1;\n    const isLast = currentPage === numPages;\n    const prevPage = currentPage - 1 === 1 ? \"/\" : (currentPage - 1).toString();\n    const nextPage = (currentPage + 1).toString();\n\n    console.log(posts);\n    return (\n      <Layout>\n        <div className=\"flex flex-col md:flex-row space-x-4\">\n          <PostCard nodes={nodes} />\n          <Category />\n        </div>\n        <div className=\"flex flex-row justify-center items-center\">\n          {!isFirst && (\n            <Link\n              to={`/blog${currentPage === 2 ? \"\" : `/${prevPage}`}`}\n              rel=\"prev\"\n            >\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <p\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link to={`/blog/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            </p>\n          ))}\n          {!isLast && (\n            <Link to={`/blog/${nextPage}`} rel=\"next\">\n              Next Page →\n            </Link>\n          )}\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMdx(sort: { frontmatter: { date: DESC } }, limit: $limit, skip: $skip) {\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n          }\n        }\n      }\n      nodes {\n        frontmatter {\n          title\n          slug\n          date(formatString: \"MMMM D, YYYY\")\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(height:130)\n            }\n          }\n        }\n        id\n        excerpt(pruneLength: 220)\n      }\n    }\n  }\n`;\n"],"names":["Category","StaticQuery","query","render","data","className","allMdx","group","map","tag","key","fieldValue","Link","to","kebabCase","totalCount","nodes","node","id","frontmatter","slug","title","excerpt","G","image","getImage","featuredImage","childImageSharp","gatsbyImageData","backgroundColor","imgStyle","objectFit","width","height","date","BlogList","posts","this","props","edges","currentPage","numPages","pageContext","isFirst","isLast","prevPage","toString","nextPage","console","log","rel","Array","from","length","_","i","style","margin","React"],"sourceRoot":""}