{"version":3,"file":"component---src-templates-blog-template-js-6059ea5421f15dccf0fd.js","mappings":"yNAIe,SAASA,IACtB,OACE,gBAAC,EAAAC,YAAW,CACVC,MAAK,aAULC,OAASC,GACP,uBAAKC,UAAU,2DACb,2BACE,sBAAIA,UAAU,eAAc,QAC5B,2BACGD,EAAKE,OAAOC,MAAMC,KAAKC,GACtB,qBAAGC,IAAKD,EAAIE,WAAYN,UAAU,eAChC,gBAAC,EAAAO,KAAI,CACHC,GAAK,SAAQC,IAAUL,EAAIA,QAC3BJ,UAAU,+FAETI,EAAIA,IAAI,KAAGA,EAAIM,WAAW,YAU/C,C,wBCIA,MAtCiB,IAAgB,IAAf,MAAEC,GAAO,EACzB,OACE,uBAAKX,UAAU,uCACZW,EAAMR,KAAKS,GACV,2BACEP,IAAKO,EAAKC,GACVb,UAAU,8DAEV,gBAAC,EAAAO,KAAI,CAACC,GAAK,SAAQI,EAAKE,YAAYC,QAClC,uBAAKf,UAAU,oDACb,uBAAKA,UAAU,wCACb,uBAAKA,UAAU,4FACb,gBAAC,EAAAgB,EAAW,CACVhB,UAAU,+BACViB,OAAOC,EAAAA,EAAAA,GAASN,EAAKE,YAAYK,cAAcC,gBAAgBC,iBAC/DC,IAAKV,EAAKE,YAAYS,UAK5B,uBAAKvB,UAAU,0DACb,sBAAIA,UAAU,0BAA0BY,EAAKE,YAAYS,OACzD,qBAAGvB,UAAU,2DACVY,EAAKY,SAER,uBAAKxB,UAAU,sDACb,4BAAM,2BACN,4BAAOY,EAAKE,YAAYW,aAOhC,EClCoC,IAEzBC,EAAQ,8DA4C1B,OA5C0B,wBAC3B5B,OAAA,WACE,MAAM6B,EAAQC,KAAKC,MAAM9B,KAAKE,OAAO6B,MAC/BnB,EAAQiB,KAAKC,MAAM9B,KAAKE,OAAOU,OAC/B,YAAEoB,EAAW,SAAEC,GAAaJ,KAAKC,MAAMI,YACvCC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGM,WAC3DC,GAAYP,EAAc,GAAGM,WAGnC,OADAE,QAAQC,IAAIb,GAEV,gBAAC,IAAM,KACL,uBAAK3B,UAAU,uCACb,gBAAC,EAAQ,CAACW,MAAOA,IACjB,gBAAChB,EAAQ,OAEX,uBAAKK,UAAU,8CACXkC,GACA,gBAAC,EAAA3B,KAAI,CACHC,GAAK,SAAuB,IAAhBuB,EAAoB,GAAM,IAAGK,KACzCK,IAAI,QACL,mBAIFC,MAAMC,KAAK,CAAEC,OAAQZ,IAAY,CAACa,EAAGC,IACpC,qBACEzC,IAAM,oBAAmByC,EAAI,IAC7BC,MAAO,CACLC,OAAQ,IAGV,gBAAC,EAAAzC,KAAI,CAACC,GAAK,SAAc,IAANsC,EAAU,GAAKA,EAAI,KAAMA,EAAI,OAGlDX,GACA,gBAAC,EAAA5B,KAAI,CAACC,GAAK,SAAQ8B,IAAYG,IAAI,QAAO,gBAOpD,EAAC,EA5C0B,CAASQ,EAAAA,U","sources":["webpack://brightbytes.dev/./src/components/category.js","webpack://brightbytes.dev/./src/components/postCard.js","webpack://brightbytes.dev/./src/templates/blogTemplate.js"],"sourcesContent":["import { Link, StaticQuery, graphql } from \"gatsby\";\nimport kebabCase from \"lodash/kebabCase\";\nimport React from \"react\";\n\nexport default function Category() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query TagsQuery {\n          allMdx(limit: 2000) {\n            group(field: { frontmatter: { tags: SELECT } }) {\n              tag: fieldValue\n              totalCount\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <div className=\"bg-gray-800 rounded-lg px-10 py-4 m-2 h-fit text-white \">\n          <div>\n            <h1 className=\"text-center\">Tags</h1>\n            <div>\n              {data.allMdx.group.map((tag) => (\n                <p key={tag.fieldValue} className=\"w-full py-2\">\n                  <Link\n                    to={`/tags/${kebabCase(tag.tag)}/`}\n                    className=\" w-full justify-start px-3 whitespace-nowrap items-start text-start bg-black text-teal-300 \"\n                  >\n                    {tag.tag} ({tag.totalCount})\n                  </Link>\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    />\n  );\n}\n","import { Link } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nconst PostCard = ({ nodes }) => {\n  return (\n    <div className=\"flex flex-col w-full space-y-3 pt-2\">\n      {nodes.map((node) => (\n        <article\n          key={node.id}\n          className=\"bg-post-bg text-white rounded-lg shadow-md overflow-hidden\"\n        >\n          <Link to={`/blog/${node.frontmatter.slug}`}>\n            <div className=\"flex flex-col md:flex-row items-start gap-4 px-4\">\n              <div className=\"w-full md:w-auto flex justify-center\">\n                <div className=\"w-full h-40 sm:h-32 flex items-center justify-center bg-white rounded-md overflow-hidden\">\n                  <GatsbyImage\n                    className=\"w-full h-full object-contain\"\n                    image={getImage(node.frontmatter.featuredImage.childImageSharp.gatsbyImageData)}\n                    alt={node.frontmatter.title}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex flex-col justify-between w-full px-2 pb-2 md:px-2\">\n                <h2 className=\"text-lg font-bold mb-2\">{node.frontmatter.title}</h2>\n                <p className=\"hidden sm:block text-gray-300 text-sm line-clamp-3 mb-4\">\n                  {node.excerpt}\n                </p>\n                <div className=\"flex justify-between text-xs text-gray-400 mt-auto\">\n                  <span>Author: Ahmad Roshanfar</span>\n                  <span>{node.frontmatter.date}</span>\n                </div>\n              </div>\n            </div>\n          </Link>\n        </article>\n      ))}\n    </div>\n  );\n};\n\nexport default PostCard;\n","import { Link, graphql } from \"gatsby\";\nimport React from \"react\";\nimport Category from \"../components/category\";\nimport Layout from \"../components/layout/layout\";\nimport PostCard from \"../components/postCard\";\n\nexport default class BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.allMdx.edges;\n    const nodes = this.props.data.allMdx.nodes;\n    const { currentPage, numPages } = this.props.pageContext;\n    const isFirst = currentPage === 1;\n    const isLast = currentPage === numPages;\n    const prevPage = currentPage - 1 === 1 ? \"/\" : (currentPage - 1).toString();\n    const nextPage = (currentPage + 1).toString();\n\n    console.log(posts);\n    return (\n      <Layout>\n        <div className=\"flex flex-col md:flex-row space-x-4\">\n          <PostCard nodes={nodes} />\n          <Category />\n        </div>\n        <div className=\"flex flex-row justify-center items-center\">\n          {!isFirst && (\n            <Link\n              to={`/blog${currentPage === 2 ? \"\" : `/${prevPage}`}`}\n              rel=\"prev\"\n            >\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <p\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link to={`/blog/${i === 0 ? \"\" : i + 1}`}>{i + 1}</Link>\n            </p>\n          ))}\n          {!isLast && (\n            <Link to={`/blog/${nextPage}`} rel=\"next\">\n              Next Page →\n            </Link>\n          )}\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMdx(sort: { frontmatter: { date: DESC } }, limit: $limit, skip: $skip) {\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n          }\n        }\n      }\n      nodes {\n        frontmatter {\n          title\n          slug\n          date(formatString: \"MMMM D, YYYY\")\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(height:130)\n            }\n          }\n        }\n        id\n        excerpt(pruneLength: 220)\n      }\n    }\n  }\n`;\n"],"names":["Category","StaticQuery","query","render","data","className","allMdx","group","map","tag","key","fieldValue","Link","to","kebabCase","totalCount","nodes","node","id","frontmatter","slug","G","image","getImage","featuredImage","childImageSharp","gatsbyImageData","alt","title","excerpt","date","BlogList","posts","this","props","edges","currentPage","numPages","pageContext","isFirst","isLast","prevPage","toString","nextPage","console","log","rel","Array","from","length","_","i","style","margin","React"],"sourceRoot":""}